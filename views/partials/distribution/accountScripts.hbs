<script src="/js/jquery-3.7.1.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
<script>
    
    var userRole = $('#userRole').val();
    var loggedEmail = $('#loggedEmail').val();
    console.log('userRole: ' + userRole);

    if (userRole === "Retailer") {
        $("[for=confirmAmount]").hide();
        $("#confirmAmount").hide();
    } else {
        // Show user-specific content
        $("#moreDetails").removeClass('visually-hidden');
        $("#confirmAmount").show();
        $("#confirmAmount").prop("required", true);
        $("#returnAmount").prop("readonly", true);
    }


    function ReloadPage() {
        location.reload();
    }
    var hideColumn = (userRole == "Retailer") ? true : false;
    var btnText = (userRole == "Retailer") ? 'Update Returns' : 'Confirm Returns';
    $('#updateBtn').html(btnText);

    $(document).ready(function () {
        var publicationDate = "";
        var returnAmt = 0;
        var drawAmt = 0;
        var drawAmt = 0;
        var isDisputed = 0;
        $('a[data-bs-toggle="modal"]').click(function () {

            $('#historyData').hide();
            //console.log($(this).closest('tr'));
            const modalId = $(this).attr('data-bs-target');

            if (modalId === '#returnDataModal') {
                returnAmt = $(this).closest('tr').find('[name=ReturnAmount]').val();
                drawAmt = $(this).closest('tr').find('[name=DistributionAmount]').val();
                confirmAmt = $(this).closest('tr').find('[name=ConfirmedAmount]').val();
                isDisputed = $(this).closest('tr').find('[name=IsDisputed]').val();
                publicationDate = $(this).find(':first-child').val();
                if (!publicationDate) {
                    publicationDate = $(this).closest('tr').find('[name=PublicationDate]').val();
                }

                $('#publicationDate').val(publicationDate);
                $('#pubDateModal').html( $(this).closest('tr').find('[name=PublicationDate]').val());
                $('#returnAmount').val(returnAmt);
                $('#drawAmount').val(drawAmt);
                $('#confirmAmount').val(confirmAmt);
                $('#isDisputed').val(isDisputed);
                $('.showDrawCnt').html(drawAmt);

            } 
            else {
                $('#disputeDrawAmount').val(drawAmount);
                $('#disputeEmail').val(loggedEmail);
                var parts = publicationDate.split(/[\s/:]/); // Split the date string using whitespace, "/", ":", and ":"
                var day = parseInt(parts[0], 10); // Extract the day (22)
                var month = parseInt(parts[1], 10); // Extract the month (2)
                var year = parseInt(parts[2], 10); // Extract the year (2024)

                // Adjust month index since JavaScript Date object months are zero-based (0-11)
                month -= 1;

                // Create a new Date object with the extracted year, month, and day
                var date = new Date(year, month, day);
                // Define days and months arrays
                var days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
                var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

                // Extract day, month, and year from the Date object
                var dayOfWeek = days[date.getDay()];
                var dayOfMonth = date.getDate();
                var month = months[date.getMonth()];
                var year = date.getFullYear();

                // Concatenate day, month, and year in the desired format
                var formattedDate = dayOfWeek + ", " + dayOfMonth + "-" + month + "-" + year;
                $('#pubDateModal').html(formattedDate);
                $('#disputeDateModal').html(formattedDate);
            }
        });

        $('#returnForm').submit(function (e) {
            e.preventDefault();

            var drawAmount = parseInt($('#drawAmount').val());
            var returnAmount = parseInt($('#returnAmount').val());
            var confirmAmount = parseInt($('#confirmAmount').val());

            // Check if the return amount is greater than the draw amount
            if (returnAmount > drawAmount || confirmAmount > drawAmount) {
                // Show an error message
                swal({
                        title: "Error!",
                        text: "Return amount cannot be greater than draw amount!",
                        type: "warning",
                        dangerMode: true
                });

                return;
            }

            let formData = $("[name=returnForm]").valid();
            let Url = $("[name=returnForm]").data("request-url");
            if (formData) {
                //Serialize the form datas.   +
                var returnsData = $("[name=returnForm] :input").serialize();
                //console.log(returnsData);
                $('#updateBtn').attr('disabled', true);
                $('#updateBtn').html('Loading..');

                $.ajax({
                    type: "POST",
                    url: '/distribution/updatereturns',
                    dataType: 'json',
                    data: returnsData,
                    success: function (result) {
                        console.log(result);

                        swal({
                            title: "Success!",
                            text: "Returns updated!",
                            type: "success",
                            dangerMode: false
                        });

                        setTimeout(
                            ReloadPage
                            , 2500);

                        // Clear the modal fields
                        $('#publicationDate').val('');
                        $('#returnAmount').val('');
                        $('#confirmAmount').val('');
                        $('#confirmReturn').prop('checked', false);
                        // Close the modal
                        $('#returnDataModal').modal('hide');
                    }
                });
            }
        });

        $('#disputeForm').submit(function (e) {
            e.preventDefault();

            var drawAmount = parseInt($('#drawAmount').val());
            var returnAmount = parseInt($('#returnAmount').val());
            var confirmAmount = parseInt($('#confirmAmount').val());

            let formData = $("[name=disputeForm]").valid();
            let Url = $("[name=disputeForm]").data("request-url");
            if (formData) {
                //Serialize the form datas.   
                var returnsData = $("[name=disputeForm] :input").serialize();
                //console.log(returnsData);
                $('#sendBtn').attr('disabled', true);
                $('#sendBtn').html('Loading..');

                $.ajax({
                    type: "POST",
                    url: Url,
                    dataType: 'json',
                    data: returnsData,
                    success: function (result) {
                        console.log(result);

                        swal({
                            title: "Success!",
                            text: "Your dispute has been successfully submitted!",
                            type: "success",
                            dangerMode: false
                        });

                        setTimeout(
                            ReloadPage
                            , 2500);

                        // Clear the modal fields
                        $('#disputeAmount').val('');
                       
                        // Close the modal
                        $('#disputeDrawModal').modal('hide');
                    }
                });
            }
        });

        $('.dtDistributions').DataTable({
            fixedHeader: true,
            lengthChange: false,
            ordering: false,
            pageLength: 30,
            columnDefs: [
                {
                    targets: [3],
                    visible: !hideColumn,
                    //searchable: false
                }
            ],
            dom: "<'row'<'col-sm-12'f>>" + // Place the search box in its own row and make it wider
                 "<'row'<'col-sm-12'tr>>" + // Display the table in its own row
                 "<'row'<'col-sm-5'i><'col-sm-7'p>>",
            footerCallback: function (row, data, start, end, display) {
                var api = this.api(), data;
                // Remove the formatting to get integer data for summation
                let intVal = function (i) {
                    return typeof i === 'string'
                        ? i.replace(/[\$,]/g, '') * 1
                        : typeof i === 'number'
                        ? i
                        : 0;
                };

                // Calculate the average for the specific column (index 3 in this example)
                var avg = api.column(2, { page: 'current' }).data()
                    .reduce(function (a, b) {
                        return intVal(a) + intVal(b);
                    }, 0 ) / api.column(2, { page: 'current' }).data().length;
                // Update the footer
                api.column(2).footer().innerHTML = 'Avg. Returns: ' + avg.toFixed(2);

            },
            initComplete: function () {
                // Add a class to the search label
                $('.dataTables_filter label').addClass('form-label');
            }

        });

        $('[name=getLatest]').click(function () {
            var spinner = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Loading...';
            $('[name=getLatest]').html(spinner);
            $('[name=getLatest]').attr('disabled', true);

            $.ajax({
                    type: "POST",
                    url: '/distribution/getlatest',
                    dataType: 'json',
                    data: { id: $('#accountId').val() },
                success: function (response) {

                     if (response.success) {
                       console.log(response.success);

                        swal({
                            title: "Success!",
                            text: "Latest information has been pulled!",
                            type: "success",
                            dangerMode: false
                        });

                        setTimeout(
                            ReloadPage
                            , 2500);
                    } else {
                       swal({
                            title: "Error!",
                            text: "Something went wrong| Please try again later!",
                            type: "warning",
                            dangerMode: true
                        });
                    }


                    }
                });

        });

        $('[name=getLatestDraw]').click(function () {
            var spinner = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Loading...';
            $('[name=getLatestDraw]').html(spinner);
            $('[name=getLatestDraw]').attr('disabled', true);

            $.ajax({
                    type: "POST",
                    url: '/distribution/getlatestdraw',
                    dataType: 'json',
                    data: { id: $('#accountId').val() },
                success: function (response) {

                     if (response.success) {
                       console.log(response.success);

                        swal({
                            title: "Success!",
                            text: "Distribition numbers updated!",
                            type: "success",
                            dangerMode: false
                        });

                        setTimeout(
                            ReloadPage
                            , 2500);
                    } else {
                       swal({
                            title: "Error!",
                            text: "Something went wrong| Please try again later!",
                            type: "warning",
                            dangerMode: true
                        });
                    }


                    }
                });

        });

    });
</script>